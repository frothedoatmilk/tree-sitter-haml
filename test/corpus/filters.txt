================================================================================
Filters
================================================================================

:javascript
  alert('Hello world!')
%foo
:css
  .foo { color: red; }
%foo

--------------------------------------------------------------------------------

(source_file
  (filter
    (filter_name)
    (filter_body))
  (tag
    (tag_name))
  (filter
    (filter_name)
    (filter_body))
  (tag
    (tag_name)))

================================================================================
Nested filters
================================================================================

- flavor = "raspberry"
#content
  :textile
    I *really* prefer _#{flavor}_ jam.
%foo

--------------------------------------------------------------------------------

(source_file
  (ruby_block_run
    (ruby_code))
  (tag
    (id)
    (filter
      (filter_name)
      (filter_body)))
  (tag
    (tag_name)))

================================================================================
Filter with the blank line after
================================================================================

:css
  body { padding: 0; }

- other_ruby_code

--------------------------------------------------------------------------------


(source_file
  (filter
    (filter_name)
    (filter_body))
  (ruby_block_run
    (ruby_code)))

================================================================================
Filter should not be greedy
================================================================================

= javascript_tag nonce: true do
  :javascript
    const { namespace: sp_namespace, hostname: sp_hostname, ...snowplowOptions } = #{raw(Gitlab::Tracking.snowplow_options.to_json)};

    window.snowplow('newTracker',
      sp_namespace,
      sp_hostname,
      snowplowOptions
    );

    window.snowplow('flushBuffer');

    window.snowplowContext = {}

--------------------------------------------------------------------------------

(source_file
  (ruby_block_output
    (ruby_code)
    (filter
      (filter_name)
      (filter_body))))
